{"ast":null,"code":"import _classCallCheck from\"C:/Users/FR/Desktop/react_extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/FR/Desktop/react_extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/FR/Desktop/react_extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/FR/Desktop/react_extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var Demo=/*#__PURE__*/function(_Component){_inherits(Demo,_Component);var _super=_createSuper(Demo);function Demo(){var _this;_classCallCheck(this,Demo);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={count:0};_this.increment=function(){/*  对象式setState   \r\n        //1. 获取原来的状态\r\n        //const count = this.state.count //一般写法\r\n        const {count} = this.state  //解构赋值\r\n        //2.更新状态\r\n        //this.setState({count:count+1})\r\n        //console.log(this.state.count); //输出的还是前一个，因为是setState是同步方法，但是setState引起的React的更新的动作是异步执行\r\n        //要想看到更新后的状态，这时候就要启动回调函数了\r\n\r\n        this.setState({count:count+1},() => {\r\n            console.log(this.state.count);\r\n        })\r\n         */ //函数式setState\n_this.setState(function(state,props){return{count:state.count+1};//    return {count:props.x+1}\n});};return _this;}_createClass(Demo,[{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\",this.state.count,\" \"]}),/*#__PURE__*/_jsx(\"button\",{onClick:this.increment,children:\"\\u70B9\\u6211\\u52A01\"})]});}}]);return Demo;}(Component);export{Demo as default};","map":{"version":3,"sources":["C:/Users/FR/Desktop/react_extension/src/components/1_setState/index.jsx"],"names":["React","Component","Demo","state","count","increment","setState","props"],"mappings":"wlBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,C,2FAEqBC,CAAAA,I,mTACjBC,K,CAAQ,CAACC,KAAK,CAAC,CAAP,C,OACRC,S,CAAa,UAAM,CACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAbuB,CAenB;AACA,MAAKC,QAAL,CAAc,SAACH,KAAD,CAAOI,KAAP,CAAiB,CAE3B,MAAO,CAACH,KAAK,CAACD,KAAK,CAACC,KAAN,CAAY,CAAnB,CAAP,CACJ;AACC,CAJD,EAKC,C,sDACD,iBAAS,CACL,mBACI,oCACI,6DAAW,KAAKD,KAAL,CAAWC,KAAtB,OADJ,cAEI,eAAQ,OAAO,CAAG,KAAKC,SAAvB,iCAFJ,GADJ,CAMH,C,kBA/B6BJ,S,SAAbC,I","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Demo extends Component {\r\n    state = {count:0};\r\n    increment  = () => {\r\n    /*  对象式setState   \r\n        //1. 获取原来的状态\r\n        //const count = this.state.count //一般写法\r\n        const {count} = this.state  //解构赋值\r\n        //2.更新状态\r\n        //this.setState({count:count+1})\r\n        //console.log(this.state.count); //输出的还是前一个，因为是setState是同步方法，但是setState引起的React的更新的动作是异步执行\r\n        //要想看到更新后的状态，这时候就要启动回调函数了\r\n\r\n        this.setState({count:count+1},() => {\r\n            console.log(this.state.count);\r\n        })\r\n         */\r\n\r\n    //函数式setState\r\n    this.setState((state,props) => {\r\n        \r\n        return {count:state.count+1}\r\n    //    return {count:props.x+1}\r\n    })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>当前求和为：{this.state.count} </h1>\r\n                <button onClick ={this.increment} >点我加1</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}