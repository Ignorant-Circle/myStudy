{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FR\\\\Desktop\\\\react_extension\\\\src\\\\components\\\\1_setState\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Demo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n\n    this.increment = () => {\n      //1. 获取原来的状态\n      //const count = this.state.count //一般写法\n      const {\n        count\n      } = this.state; //解构赋值\n      //2.更新状态\n\n      this.setState({\n        count: count + 1\n      }); //console.log(this.state.count); //输出的还是前一个，因为是setState是同步方法，但是setState引起的React的更新的动作是异步执行\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", this.state.count, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: \"\\u70B9\\u6211\\u52A01\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/FR/Desktop/react_extension/src/components/1_setState/index.jsx"],"names":["React","Component","Demo","state","count","increment","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,eAAe,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACxCE,KADwC,GAChC;AAACC,MAAAA,KAAK,EAAC;AAAP,KADgC;;AAAA,SAExCC,SAFwC,GAE3B,MAAM;AACf;AACA;AACA,YAAM;AAACD,QAAAA;AAAD,UAAU,KAAKD,KAArB,CAHe,CAGa;AAC5B;;AACA,WAAKG,QAAL,CAAc;AAACF,QAAAA,KAAK,EAACA,KAAK,GAAC;AAAb,OAAd,EALe,CAMf;AAEH,KAVuC;AAAA;;AAWxCG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAA,2DAAW,KAAKJ,KAAL,CAAWC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAG,KAAKC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAlBuC","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Demo extends Component {\r\n    state = {count:0};\r\n    increment  = () => {\r\n        //1. 获取原来的状态\r\n        //const count = this.state.count //一般写法\r\n        const {count} = this.state  //解构赋值\r\n        //2.更新状态\r\n        this.setState({count:count+1})\r\n        //console.log(this.state.count); //输出的还是前一个，因为是setState是同步方法，但是setState引起的React的更新的动作是异步执行\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>当前求和为：{this.state.count} </h1>\r\n                <button onClick ={this.increment} >点我加1</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}