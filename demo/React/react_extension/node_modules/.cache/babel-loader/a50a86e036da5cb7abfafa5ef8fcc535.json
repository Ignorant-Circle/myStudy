{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FR\\\\Desktop\\\\react_extension\\\\src\\\\components\\\\1_setState\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Demo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n\n    this.increment = () => {\n      /*  对象式setState   \r\n          //1. 获取原来的状态\r\n          //const count = this.state.count //一般写法\r\n          const {count} = this.state  //解构赋值\r\n          //2.更新状态\r\n          //this.setState({count:count+1})\r\n          //console.log(this.state.count); //输出的还是前一个，因为是setState是同步方法，但是setState引起的React的更新的动作是异步执行\r\n          //要想看到更新后的状态，这时候就要启动回调函数了\r\n            this.setState({count:count+1},() => {\r\n              console.log(this.state.count);\r\n          })\r\n           */\n      //函数式setState\n      this.setState((state, props) => {\n        return {\n          count: state.count + 1\n        };\n        return {\n          count: props.x + 1\n        };\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", this.state.count, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: \"\\u70B9\\u6211\\u52A01\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/FR/Desktop/react_extension/src/components/1_setState/index.jsx"],"names":["React","Component","Demo","state","count","increment","setState","props","x","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,eAAe,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACxCE,KADwC,GAChC;AAACC,MAAAA,KAAK,EAAC;AAAP,KADgC;;AAAA,SAExCC,SAFwC,GAE3B,MAAM;AACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGI;AACA,WAAKC,QAAL,CAAc,CAACH,KAAD,EAAOI,KAAP,KAAiB;AAE3B,eAAO;AAACH,UAAAA,KAAK,EAACD,KAAK,CAACC,KAAN,GAAY;AAAnB,SAAP;AACD,eAAO;AAACA,UAAAA,KAAK,EAACG,KAAK,CAACC,CAAN,GAAQ;AAAf,SAAP;AACF,OAJD;AAKC,KAvBuC;AAAA;;AAwBxCC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAA,2DAAW,KAAKN,KAAL,CAAWC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAG,KAAKC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AA/BuC","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Demo extends Component {\r\n    state = {count:0};\r\n    increment  = () => {\r\n    /*  对象式setState   \r\n        //1. 获取原来的状态\r\n        //const count = this.state.count //一般写法\r\n        const {count} = this.state  //解构赋值\r\n        //2.更新状态\r\n        //this.setState({count:count+1})\r\n        //console.log(this.state.count); //输出的还是前一个，因为是setState是同步方法，但是setState引起的React的更新的动作是异步执行\r\n        //要想看到更新后的状态，这时候就要启动回调函数了\r\n\r\n        this.setState({count:count+1},() => {\r\n            console.log(this.state.count);\r\n        })\r\n         */\r\n\r\n    //函数式setState\r\n    this.setState((state,props) => {\r\n        \r\n        return {count:state.count+1}\r\n       return {count:props.x+1}\r\n    })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>当前求和为：{this.state.count} </h1>\r\n                <button onClick ={this.increment} >点我加1</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}