{"version":3,"sources":["redux/constant.js","redux/action/count.js","containers/Count/index.jsx","containers/Person/index.jsx","redux/action/person.js","App.jsx","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/count.js","redux/store.js","index.js"],"names":["INCREMENT","DECREMENT","ADD_PERSON","increment","data","type","Count","value","selectNumber","props","decrement","incrementIfOdd","count","incrementAsync","this","personCount","style","width","ref","c","onClick","danger","Component","connect","state","persons","length","time","dispatch","setTimeout","Person","addPerson","name","nameNode","age","ageNode","personObj","id","nanoid","placeholder","map","p","App","initState","combineReducers","preState","action","createStore","allReducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.1353bedf.chunk.js","sourcesContent":["/**\r\n * 该模块是用于定义action对象中type类型的常量值，目的是便于管理的同时，防止程序员单词写错\r\n */\r\n\r\nexport const INCREMENT = 'increment';\r\nexport const DECREMENT = 'decrement';\r\nexport const ADD_PERSON = 'add_person';","/**\r\n * 该文件撞门为Count组件生成action对象\r\n */\r\nimport {INCREMENT,DECREMENT} from '../constant';\r\n//同步的action ，返回值为PObject类型的一般对象\r\nexport const increment = data => ({type:INCREMENT,data})\r\nexport const decrement = data => ({ type:DECREMENT,data}) \r\n\r\n//异步的action ，返回值为函数,异步action中一般都会调用同步action，异步action不是必须要用的\r\nexport const incrementAsync = (data,time) => {\r\n    return (dispatch) => {\r\n        setTimeout(() => {\r\n            dispatch(increment(data))\r\n        }, time);\r\n    }\r\n    \r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button } from 'antd';\r\nimport 'antd/dist/antd.css'\r\n//引入connect用于连接UI组件与redux\r\nimport {connect} from 'react-redux'\r\n//引入action\r\nimport {\r\n    increment,\r\n    decrement,\r\n   incrementAsync\r\n} from '../../redux/action/count'\r\n\r\n//定义UI组件\r\nclass Count extends Component {\r\n    //加法\r\n    increment = () => {\r\n        const {value} = this.selectNumber; //value是字符串，所以下文要*1，将其转换为数字\r\n        this.props.increment(value*1)\r\n   \r\n    }\r\n    //减法\r\n    decrement = () => {\r\n        const {value} = this.selectNumber; //value是字符串，所以下文要*1，将其转换为数字\r\n        this.props.decrement(value*1)\r\n        \r\n    }\r\n    incrementIfOdd = () => {\r\n        const {value} = this.selectNumber; //value是字符串，所以下文要*1，将其转换为数字\r\n        if(this.props.count % 2 !== 0){\r\n            this.props.increment(value*1)\r\n        }\r\n    }\r\n    incrementAsync = () => {\r\n        const {value} = this.selectNumber;\r\n\t\tthis.props.incrementAsync(value*1,500)\r\n       \r\n    }\r\n    render() {\r\n        //console.log('UI组件接收到的props是',this.props);\r\n        return (\r\n            <div>\r\n                <h1>我是Count组件,下方组件总人数为{this.props.personCount}</h1>\r\n                <h2>当前求和为：{this.props.count}</h2>&nbsp;\r\n                <select style={{ width: 120 }} ref={c => this.selectNumber = c}>\r\n\t\t\t\t\t<option value=\"1\">1</option>\r\n\t\t\t\t\t<option value=\"2\">2</option>\r\n\t\t\t\t\t<option value=\"3\">3</option>\r\n\t\t\t\t</select>&nbsp;\r\n                &nbsp;&nbsp;\r\n                <Button onClick={this.increment} type=\"primary\">+</Button>&nbsp;&nbsp;\r\n                <Button onClick={this.decrement} type=\"primary\">-</Button>&nbsp;&nbsp;\r\n                <Button onClick={this.incrementIfOdd} type=\"primary\" danger>当前求和为奇数再加</Button>&nbsp;&nbsp;\r\n                <Button onClick={this.incrementAsync} type=\"primary\" danger>异步加</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//使用connect()()创建并暴露一个Count的容器组件\r\nexport default  connect(\r\n    state => ({count:state.count,personCount:state.persons.length}),\r\n   //mapDispatchToProps的简写\r\n   {\r\n       increment,\r\n       decrement,\r\n       incrementAsync\r\n   }\r\n    )\r\n    (Count)\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport {nanoid} from 'nanoid'\r\nimport {connect} from 'react-redux'\r\nimport {addPerson} from '../../redux/action/person'\r\n//定义UI组件\r\nclass Person extends Component {\r\n    addPerson = () => {\r\n        const name = this.nameNode.value;\r\n        const age = this.ageNode.value*1;\r\n        const personObj = {id:nanoid(),name,age}\r\n        this.props.addPerson(personObj)\r\n        this.nameNode.value = '';\r\n        this.ageNode.value = '';\r\n        \r\n    }\r\n    render() {  \r\n        return (\r\n            <div>\r\n                <h1>我是Person组件,上方组件的求和为{this.props.count}</h1>\r\n                &nbsp;<input type='text'  placeholder=\"输入名字\" ref={ c => this.nameNode = c} /><br/><br/>\r\n                &nbsp;<input type='text' placeholder=\"输入年龄\" ref = {c => this.ageNode = c}  /><br/><br/>\r\n                &nbsp;<button onClick ={this.addPerson} >添加</button>\r\n                <ul>\r\n                    {\r\n                        this.props.persons.map((p) => {\r\n                            return <li key={p.id}>{p.name} ---- {p.age}</li>\r\n                            \r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default  connect(\r\n    state => (\r\n        {\r\n            persons:state.persons,\r\n            count:state.count\r\n        }) ,//映射状态\r\n        { \r\n            addPerson\r\n        }//映射操作状态的方法\r\n)(Person)","import {ADD_PERSON} from '../constant'\r\n\r\n//创建增加一个人的action动作对象\r\nexport const addPerson = personObj =>({type:ADD_PERSON,data:personObj})","import React, { Component } from 'react'\r\nimport Count from './containers/Count' //引入的Count的容器组件\r\nimport Person from './containers/Person' //引入的Person的容器组件\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Count/>\r\n                <hr/>\r\n                <Person/>\r\n          </div>\r\n           \r\n            \r\n        )\r\n    }\r\n}\r\n","import { ADD_PERSON } from \"../constant\";\r\n\r\n//初始化人的列表\r\nconst initState =[{id:1, name:'tom', age:18 }]\r\nexport default function personReducer (preState = initState,action){\r\n    const {type,data} = action;\r\n    switch (type) {\r\n        case ADD_PERSON: //若为添加一个人\r\n            //preState.unshift(data) //此处不可以这样写，这样写会导致preState被改写了，personReducer就不是纯函数了\r\n            //redux的reducer函数必须是一个纯函数\r\n            return [data,...preState];\r\n        default:\r\n           return preState;\r\n    }\r\n}","/**\r\n * 该文件用于汇总所有的reducer为一个总的reducer\r\n */\r\n//引入combineReducer， 用于整合多个reducer\r\nimport {combineReducers} from 'redux';\r\n//引入为Count组件服务的reducer\r\nimport count from './count';\r\n//引入为Person组件服务的reducer\r\nimport persons from './person';\r\n\r\n\r\n//汇总所有的reducer变为一个总的reducer\r\nexport default  combineReducers({\r\n    count,\r\n    persons\r\n})\r\n\r\n","/**\r\n * 1. 该文件是用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数\r\n * 2. reducer函数会接收到两个参数，分别是之前的状态（preState）和动作对象（action）\r\n */\r\n\r\nimport {INCREMENT,DECREMENT} from '../constant';\r\nconst initState = 0;\r\nexport default function countReducer(preState = initState,action) {\r\n    //console.log(preState,action);\r\n    \r\n    //从action对象中获取：type、data\r\n    const {type,data} = action;\r\n    //根据type决定如何加工数据\r\n    switch (type) {\r\n        case INCREMENT:  //如果是加\r\n            return preState+data;\r\n        case DECREMENT:  //如果是减\r\n            return preState-data    \r\n        default:\r\n            return preState;\r\n    }\r\n}","/**\r\n * 该文件专门用于暴露一个store对象，整个应用只有一个store对象\r\n */\r\n//引入createStore， 专门用于创建redux最为核心的store对象\r\nimport {createStore,applyMiddleware} from 'redux';\r\n//引入汇总后的reducer\r\nimport allReducers from './reducers'\r\n//引入redux-thunk，用于支持异步action\r\nimport thunk from 'redux-thunk';\r\n\r\n//引入redux-devtools-extension\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n//暴露store\r\nexport default createStore(allReducers, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nReactDOM.render(\r\n    /**\r\n     * 此处需要用Provide包裹App,目的是让App所有的后代容器组件都唔那个接收到store\r\n     */\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,document.getElementById('root'))\r\n"],"sourceRoot":""}